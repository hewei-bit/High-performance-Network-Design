package zurg;

option cc_generic_services = true;
option java_generic_services = true;
option py_generic_services = true;
option java_package = "com.chenshuo.muduo.zurg.proto";
option java_outer_classname = "SlaveProto";

message GetHardwareRequest {
  optional bool lshw = 1 [default = false];
}

message GetHardwareResponse {
  optional string lspci = 1;
  optional string lscpu = 2;
  optional string lshw = 3;
  optional string ifconfig = 4;
}

message GetFileContentRequest {
  required string file_name = 1;
  optional int32 max_size = 2 [default = 1048576];
  // optional int64 offset = 3 [default = 0];
}

message GetFileContentResponse {
  required int32 error_code = 1;
  optional bytes content = 2;
  optional int64 file_size = 3;
  optional int64 modify_time = 4;
  optional int64 create_time = 5;
}

message GetFileChecksumRequest {
  repeated string files = 1;
}

message GetFileChecksumResponse {
  repeated string md5sums = 1;
}

message DiskUsage {
  required string device = 1;
  required string mount = 2;

  // statvfs
  required int32 block_size = 3;
  required int64 blocks_all = 4;
  required int64 blocks_free = 5;
  required int64 blocks_avail = 6;

  required int64 inodes_all = 7;
  required int64 inodes_free = 8;
  required int64 inodes_avail = 9;

  required uint64 fsid = 10;
  required uint64 flag = 11;
  required uint64 namemax = 12;
}

message ListProcessesRequest {
  repeated string include_users = 1;
  repeated string exclude_users = 2;
  optional bool get_load = 3 [default = false];
}

message ListProcessesResponse {

  message Process {
    required int32 pid = 1;
    required string proc_stat = 2;
    required string proc_status = 3;
    optional string cmdline = 4;
    optional string exe_file = 5;
  }

  repeated Process processes = 1;

  // load
  optional string meminfo = 2;
  optional string proc_stat = 3;
  optional string loadavg = 4;
  optional string diskstats = 5;
  optional string net_dev = 6;
  optional string net_tcp = 7;

  repeated DiskUsage disk_usage = 8;

  optional string version = 9;
  optional string cpuinfo = 10;
}

message RunCommandRequest {
  required string command = 1;
  optional string cwd = 2 [default = "/tmp"];
  repeated string args = 3;
  repeated string envs = 4;
  optional bool envs_only = 5 [default = false];
  optional int32 max_stdout = 6 [default = 1048576];
  optional int32 max_stderr = 7 [default = 1048576];
  optional int32 timeout = 8 [default = 60];
  optional int32 max_memory_mb = 9 [default = 32768];
}

message RunCommandResponse {
  required int32 error_code = 1;
  optional int32 pid = 2;
  optional int32 status = 3;
  optional bytes std_output = 4;
  optional bytes std_error = 5;
  optional string executable_file = 6;

  optional int64 start_time_us  = 16;
  optional int64 finish_time_us = 17;
  optional float user_time      = 18;
  optional float system_time    = 19;

  optional int64 memory_maxrss_kb = 20;
  // optional int64 ctxsw = 11;

  optional int32 exit_status = 30 [default = 0];
  optional int32 signaled = 31 [default = 0];
  optional bool coredump = 32 [default = false];
}

message RunScriptRequest {
  required bytes script = 1;
  optional string cwd = 2 [default = "/tmp"];
  repeated string args = 3;
  repeated string envs = 4;
  optional bool envs_only = 5 [default = false];
  optional int32 max_stdout = 6 [default = 1048576];
  optional int32 max_stderr = 7 [default = 1048576];
  optional int32 timeout = 8 [default = 60];
  optional int32 max_memory_mb = 9 [default = 32768];
  optional string interpreter = 10;
  repeated string interpreter_args = 11;
}

// ------------- Application

enum ApplicationState {
  kUnknown = 0;
  kNewApp = 1;
  kRunning = 2;
  kExited = 3;
  kError = 4;
}

message ApplicationStatus {
  required ApplicationState state = 1 [default = kUnknown];
  required string name = 2;
  optional int32 pid = 3;
  optional string executable_file = 4;
  optional string cwd = 5;
  optional string message = 6;
  optional string slave_name = 8;

  optional int64 start_time_us = 10;
  optional int64 last_stop_time_us = 11;
  optional string proc_stat = 12;
  optional string proc_status = 13;

  optional int32 last_exit_status = 30;
  optional int32 last_signaled = 31;
  optional bool last_coredump = 32;
}

message AddApplicationRequest {
  required string name = 1;
  required string binary = 2;
  repeated string args = 3;
  repeated string envs = 4;
  optional bool envs_only = 5 [default = false];
  optional bool redirect_stdout = 6 [default = true];
  optional bool redirect_stderr = 7 [default = true];
  required string slave_name = 8;
  optional int32 max_memory_mb = 9 [default = 32768];
  optional string comment = 10;

  repeated string md5sum_files = 20;
  repeated string expected_md5sums = 21;
  optional bool md5sum_now = 22;
}

message AddApplicationResponse {
  optional ApplicationStatus status = 1;
  optional AddApplicationRequest prev_request = 2;
  repeated string md5sums = 3;
}

message StartApplicationsRequest {
  repeated string names = 1;
}

message StartApplicationsResponse {
  repeated ApplicationStatus status = 1;
}

message StopApplicationRequest {
  required string names = 1;
}

message StopApplicationResponse {
  required ApplicationStatus status = 1;
}

message GetApplicationsRequest {
  repeated string names = 1;
}

message GetApplicationsResponse {
  repeated ApplicationStatus status = 1;
}

message ListApplicationsRequest {
}

message ListApplicationsResponse {
  repeated string names = 2;
}

message RemoveApplicationsRequest {
  repeated string name = 1;
}

message RemoveApplicationsResponse {
}

service SlaveService {
  rpc getHardware (GetHardwareRequest)
    returns (GetHardwareResponse);
  rpc getFileContent (GetFileContentRequest)
    returns (GetFileContentResponse);
  rpc getFileChecksum (GetFileChecksumRequest)
    returns (GetFileChecksumResponse);
  rpc listProcesses (ListProcessesRequest)
    returns (ListProcessesResponse);
  rpc runCommand (RunCommandRequest)
    returns (RunCommandResponse);
  rpc runScript (RunScriptRequest)
    returns (RunCommandResponse);
  rpc addApplication (AddApplicationRequest)
    returns (AddApplicationResponse);
  rpc startApplications (StartApplicationsRequest)
    returns (StartApplicationsResponse);
  rpc stopApplication (StopApplicationRequest)
    returns (StopApplicationResponse);
  rpc getApplications (GetApplicationsRequest)
    returns (GetApplicationsResponse);
  rpc listApplications (ListApplicationsRequest)
    returns (ListApplicationsResponse);
  rpc removeApplications (RemoveApplicationsRequest)
    returns (RemoveApplicationsResponse);
}

